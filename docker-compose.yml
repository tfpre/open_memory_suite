# Docker Compose configuration for Open Memory Suite
# Supports development, production, and GPU-accelerated deployments

version: '3.8'

services:
  # Core application service
  open-memory-suite:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: open-memory-suite
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - COST_BUDGET=10.0
      - BUDGET_TYPE=standard
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
      - ./storage:/app/storage
    restart: unless-stopped
    networks:
      - memory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web interface for monitoring and management
  web-interface:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: memory-web-interface
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    command: ["streamlit", "run", "web_interface.py"]
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - open-memory-suite
    restart: unless-stopped
    networks:
      - memory-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: memory-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - memory-network
    command: redis-server --appendonly yes

  # PostgreSQL for metadata and analytics
  postgres:
    image: postgres:15-alpine
    container_name: memory-postgres
    environment:
      - POSTGRES_DB=memory_suite
      - POSTGRES_USER=memory_user
      - POSTGRES_PASSWORD=memory_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - memory-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: memory-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - memory-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: memory-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - memory-network
    depends_on:
      - prometheus

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  memory-network:
    driver: bridge

# Override configurations for different environments
---
# Development configuration
version: '3.8'

services:
  open-memory-suite-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: open-memory-suite-dev
    ports:
      - "8000:8000"
      - "8888:8888"  # Jupyter notebook
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - RELOAD=true
    volumes:
      - .:/app
      - ./data:/app/data
      - ./logs:/app/logs
    command: ["python", "-m", "open_memory_suite.server", "--reload", "--debug"]
    networks:
      - memory-network

# GPU-accelerated configuration
---
version: '3.8'

services:
  open-memory-suite-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    container_name: open-memory-suite-gpu
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - GPU_ENABLED=true
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - memory-network